#+TITLE: Readme for gocial
* About
Share articles and comments via different social media platforms.
* Architecture
#+begin_src plantuml :file docs/images/architecture.png :results file replace :cmdline -charset UTF-8 :exports none
@startuml
'skinparam dpi 300
scale 1600 width
skinparam nodesep 20

'top to bottom direction
left to right direction

skinparam SameClassWidth true

package "Business Domain(s) ❶" as app_core {
    package Entities {
        entity "entity.IdentityProvider" as IdentityProvider {
            // Stores information about identity providers (e.g. Twitter)
            string Provider
            string UserName
            string UserID
            string UserDescription
            string UserAvatarURL
            string AccessToken
            string AccessTokenSecret
            string RefreshToken
            time.Time ExpiresAt
        }
        entity "entity.ArticleShare" as ArticleShare {
            string URL
            string Title
            string Comment
            string Providers
            // Holds information about an article to be shared

        }
        entity "entity.CommentShare" as CommentShare {
            string Comment
            // Holds information about a comment to be shared

        }
        entity "entity.AuthProviderIndex" as AuthProviderIndex {
            []string Providers
            map[string]string ProvidersMap
            // Holds list of available (identity) providers
        }
    }

    package Identity {
        interface identityRepository as "identity.Repository" {
            Storage for available identities
            + Add (entity.IdentityProvider, echo.Context) error
            + GetByProvider(string, echo.Context) (entity.IdentityProvider, error)
            + Delete (string, echo.Context) error
            + Save() error
            + Load() error
        }
    }

    package OAuth {
        interface oauthRepository as "oauth.Repository" {
            Authentication handler
            + HandleAuth (echo.Context) error
            + HandleAuthCallback (echo.Context) error
        }
        class oauthService as "oauth.Service" {
            + Repo: oauth.Repository
            + ProviderIndex: entity.AuthProviderIndex
        }
    }

    package Share {
        interface shareRepository as "share.Repository" {
            Defines how an article should be shared
            + ShareArticle(context.Context, entity.ArticleShare) error
        }

        class shareService as "share.Service" {
            + ShareArticle(entity.ArticleShare, share.Repository) error
            + ShareComment(entity.CommentShare, share.Repository) error
            + GetShareRepo(entity.IdentityProvider) (share.Repository, error)
        }
    }
}

package "Services ❷" as services {
    class HTTPServer {
        // Exposes API and functionalities via HTTP
    }

    class Lambda {
        // Exposes functionalities in a Serverless environment
    }

    ' class CLICommand as "CLI" {
    ' '    // Interact with gocial via CLI
    ' '}
}

package "OAuth Repositories" as oauthRepoImpl {
    class GothRepository  {
        Handles OAuth workflow between gocial and identity providers\nusing 3rd-party library called goth.
    }
}

package "Identity Repositories" as  identityRepoImpl {
    class CookieIdentityRepository {
        Reads, stores and handles authentication data via cookies.\nJWT tokens are used and stored as secure and httpOnly cookies.
    }

    class FileIdentityRepository {
        Reads, stores and handles authentication data via files
    }
}

package "Share Repositories" as shareRepoImpl {
    class LinkedinShareRepository  {
        Shares articles via LinkedIn
    }

    class TwitterShareRepository  {
        Shares articles via Twitter
    }
}

' ----------- Connections
HTTPServer -up-> oauthService: uses
HTTPServer -up-> shareService : uses
HTTPServer -up-> identityRepository : uses
Lambda ---left---> HTTPServer: uses

'CLICommand --> oauthService: uses

GothRepository ..> oauthRepository: implements
LinkedinShareRepository ..> shareRepository: implements
TwitterShareRepository ..> shareRepository: implements

CookieIdentityRepository ..> identityRepository: implements
FileIdentityRepository ..> identityRepository: implements

' ----------- Alignment
' All entities below each other
IdentityProvider -[hidden]left- ArticleShare
ArticleShare -[hidden]left- AuthProviderIndex
CommentShare -[hidden]left- AuthProviderIndex

' Services right of entities
Entities -[hidden]up- services


@enduml
#+end_src

#+caption: Architecture
#+RESULTS:
[[./docs/images/architecture.png]]

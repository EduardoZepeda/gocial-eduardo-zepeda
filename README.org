* About
Share articles and comments via different social media platforms.
* WIP Features
- Serverless architecture
  Currently I use [[https://www.netlify.com/][netlify.com]] to serve my Golang binary as a [[https://docs.netlify.com/functions/build/?fn-language=go][netlify build function]].
  stateless authentication. Yes, it is a big fat 12 Mb binary file served as a Serverless function!
- stateless authentication
  I don't store authentication data (like access token) on the server. I use JWT tokens for /authorization/ which are stored as /secure/, /httpOnly/ cookies. I don't use /localStorage/ nor /sessionStorage/ since in the case of XSS, an attacker could easily access the tokens.

* Architecture
#+begin_src plantuml :file docs/images/architecture.png :results file replace :cmdline -charset UTF-8 :exports none
@startuml
'skinparam dpi 300
scale 1600 width
skinparam nodesep 20

'top to bottom direction
left to right direction

skinparam SameClassWidth true

package "Business Domain(s) ❶" as app_core {
    package Entities {
        entity "entity.IdentityProvider" as IdentityProvider {
            // Stores information about identity providers (e.g. Twitter)
            string Provider
            string UserName
            string UserID
            string UserDescription
            string UserAvatarURL
            string AccessToken
            string AccessTokenSecret
            string RefreshToken
            time.Time ExpiresAt
        }
        entity "entity.ArticleShare" as ArticleShare {
            string URL
            string Title
            string Comment
            string Providers
            // Holds information about an article to be shared

        }
        entity "entity.CommentShare" as CommentShare {
            string Comment
            // Holds information about a comment to be shared

        }
        entity "entity.AuthProviderIndex" as AuthProviderIndex {
            []string Providers
            map[string]string ProvidersMap
            // Holds list of available (identity) providers
        }
    }

    package Identity {
        interface identityRepository as "identity.Repository" {
            Storage for available identities
            + Add (entity.IdentityProvider, echo.Context) error
            + GetByProvider(string, echo.Context) (entity.IdentityProvider, error)
            + Delete (string, echo.Context) error
            + Save() error
            + Load() error
        }
    }

    package OAuth {
        interface oauthRepository as "oauth.Repository" {
            Authentication handler
            + HandleAuth (echo.Context) error
            + HandleAuthCallback (echo.Context) error
        }
        class oauthService as "oauth.Service" {
            + Repo: oauth.Repository
            + ProviderIndex: entity.AuthProviderIndex
        }
    }

    package Share {
        interface shareRepository as "share.Repository" {
            Defines how an article should be shared
            + ShareArticle(context.Context, entity.ArticleShare) error
        }

        class shareService as "share.Service" {
            + ShareArticle(entity.ArticleShare, share.Repository) error
            + ShareComment(entity.CommentShare, share.Repository) error
            + GetShareRepo(entity.IdentityProvider) (share.Repository, error)
        }
    }
}

package "Services ❷" as services {
    class HTTPServer {
        // Exposes API and functionalities via HTTP
    }

    class Lambda {
        // Exposes functionalities in a Serverless environment
    }

    ' class CLICommand as "CLI" {
    ' '    // Interact with gocial via CLI
    ' '}
}

package "OAuth Repositories" as oauthRepoImpl {
    class GothRepository  {
        Handles OAuth workflow between gocial and identity providers\nusing 3rd-party library called goth.
    }
}

package "Identity Repositories" as  identityRepoImpl {
    class CookieIdentityRepository {
        Reads, stores and handles authentication data via cookies.\nJWT tokens are used and stored as secure and httpOnly cookies.
    }

    class FileIdentityRepository {
        Reads, stores and handles authentication data via files
    }
}

package "Share Repositories" as shareRepoImpl {
    class LinkedinShareRepository  {
        Shares articles via LinkedIn
    }

    class TwitterShareRepository  {
        Shares articles via Twitter
    }
}

' ----------- Connections
HTTPServer -up-> oauthService: uses
HTTPServer -up-> shareService : uses
HTTPServer -up-> identityRepository : uses
Lambda ---left---> HTTPServer: uses

'CLICommand --> oauthService: uses

GothRepository ..> oauthRepository: implements
LinkedinShareRepository ..> shareRepository: implements
TwitterShareRepository ..> shareRepository: implements

CookieIdentityRepository ..> identityRepository: implements
FileIdentityRepository ..> identityRepository: implements

' ----------- Alignment
' All entities below each other
IdentityProvider -[hidden]left- ArticleShare
ArticleShare -[hidden]left- AuthProviderIndex
CommentShare -[hidden]left- AuthProviderIndex

' Services right of entities
Entities -[hidden]up- services


@enduml
#+end_src

#+caption: Overal software architecture
[[file:docs/images/architecture.png]]

** Business domain
- everything related to the *business case*
  - user wants to allow /gocial/ to make posts and his/her behalf
  - user can share articles/comments to multiple social media platforms
- contains
  - /Entities/
  - Different /other/ domains related to the business case
    - each one might contain
      - /Services/
      - /Repositories/Interfaces/
** Identity
An /identity/ is something you get after successful authentication. After allowing
/gocial/ to interact with Twitter/LinkedIn this /struct/ will be used to
hold information about an /identity provider/:

#+caption: Structure for an identity provider
#+begin_src go
type IdentityProvider struct {
    Provider          string     `yaml:"provider"`
    UserName          string     `yaml:"name"`
    UserID            string     `yaml:"id"`
    UserDescription   string     `yaml:"description"`
    UserAvatarURL     string     `yaml:"userAvatarURL"`
    AccessToken       string     `yaml:"accessToken"`
    AccessTokenSecret string     `yaml:"accessTokenSecret"`
    RefreshToken      string     `yaml:"refreshToken"`
    ExpiresAt         *time.Time `yaml:"expiry"`
}
#+end_src
** OAuth
The /oauth/ package uses [[https://github.com/markbates/goth][goth]] to implement the OAuth workflow. /goth/ basically implements this interface:

#+caption: The oauth.Repository interface
#+begin_src go
type Repository interface {
    HandleAuth(echo.Context) error
    HandleAuthCallback(echo.Context) error
}
#+end_src
- ~HandleAuth~ defines how authentication should be done for different identity providers
- ~HandleAuthCallback~ is a /callback/ called by the identity providers
  - this is where the access tokens (among additional data) are sent to
** Share
A /share/ is the most basic entity used within /gocial/. A ~Share~ is something that
will be shared via different identity providers. At the moment you can share
- an Article
  - contains an URL, a comment, a title and a list of providers where the article should be shared to
- a comment
  - not implemented yet

#+begin_src go
// ArticleShare is an article to be shared via the share service
type ArticleShare struct {
    URL       string `json:"url" form:"url" validate:"required"`
    Title     string `json:"title" form:"title" validate:"required"`
    Comment   string `json:"comment" form:"comment" validate:"required"`
    Providers string `json:"providers" form:"providers" validate:"required"`
}

// CommentShare is a comment to be shared via the share service
type CommentShare struct {
    // TODO: Any other fields needed?
    Comment string
}
#+end_src
* Project layout

#+begin_src sh :results output :exports results
tree -L 1 -d .
#+end_src

#+caption: Overall project layout
#+RESULTS:
#+begin_example
gocial:

├── cli
├── docs
├── frontend
├── functions
├── internal
├── lambda
├── node_modules
└── server

8 directories
#+end_example

** //internal
This is where the /gocial/ specific domain code goes to. This includes /entities/, different /services/, the /authentication/ part and of course web specific stuff like /API/ and /web server/.

  #+begin_src sh :results output :exports results
  tree -L 2 ./internal
  #+end_src

  #+RESULTS:
  #+begin_example
  ./internal
  ├── config
  │   └── config.go
  ├── entity
  │   ├── identity.go
  │   ├── providers.go
  │   └── share.go
  ├── identity
  │   ├── cookie_repository.go
  │   ├── file_repository.go
  │   └── repository.go
  ├── jwt
  │   └── token.go
  ├── oauth
  │   ├── goth_repository.go
  │   ├── repository.go
  │   └── service.go
  └── share
      ├── linkedin_repository.go
      ├── repository.go
      ├── service.go
      └── twitter_repository.go

  6 directories, 15 files
  #+end_example
* TODO Deployment
* TODO Future plans
